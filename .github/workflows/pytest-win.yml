name: pytest

on:
    workflow_call:
      inputs:
        name:
          required: true
          type: string
        submodule:
          type: boolean
          default: false
        test_path:
          default: ./tests
          type: string
        python_path:
          type: string
          default: ""
        pixi_python_env:
            type: string
            default: default
        test_args:
          type: string
          default: ""
        cov:
          type: boolean
          default : false
        cov_thr:
          type: number
          default: 100

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  pytest:
    runs-on: windows-latest
    steps:
      # setup
      - uses: actions/checkout@v4

      - name: Update Submodule
        if: ${{inputs.submodule}}
        run: git submodule update --init --recursive

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          run-install: false
      # test
      - name: pytest
        if: runner.os == 'Windows' && success()
        run: |
          $Env:PYTHONPATH = "${{inputs.python_path}}"
          if ("${{inputs.cov}}" -eq "true")
          {pixi run -e ${{inputs.pixi_python_env}} pytest "${{inputs.test_path}}" --junit-xml results/pytest.xml --cov --cov-report= ${{inputs.test_args}}}
          else{pixi run -e ${{inputs.pixi_python_env}} pytest "${{inputs.test_path}}" --junit-xml results/pytest.xml ${{inputs.test_args}}}
        continue-on-error: true

      # coverage
      - name: Coverage summary and check cover
        if: inputs.cov && (success() || failure())
        id: coverage
        run: |
          "## Coverage Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          pixi run -e ${{inputs.pixi_python_env}} coverage html --skip-covered --skip-empty
          pixi run -e ${{inputs.pixi_python_env}} coverage report --skip-covered --skip-empty --format=markdown | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          pixi run -e ${{inputs.pixi_python_env}} coverage report --fail-under=${{inputs.cov_thr}}
        continue-on-error: true

      - name: Upload cov HTML report
        if: inputs.cov && job.steps.coverage.status == failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.name}}-coverage-html-report
          path: htmlcov

      - name: Set coverage status
        if: inputs.cov && (success() || failure())
        run: |
          pixi run -e ${{inputs.pixi_python_env}} coverage report --fail-under=${{inputs.cov_thr}}

      # test report
      - name: Test Report title
        if: success() || failure()
        run: |
          "## Test Report" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
      - name: Test Report
        uses: dorny/test-reporter@main
        if: success() || failure()
        with:
          name: Pytest Report (${{inputs.name}})
          path: results/pytest.xml
          reporter: java-junit
          use-actions-summary: "true"