name: pytest

on:
  workflow_call:
    inputs:
      name:
        description: Name of the test.
        required: true
        type: string
      machine:
        description: The machine that this workflow will run on.
        required: true
        type: string
      update_submodule:
        description: Whether to clone submodule.
        type: boolean
        default: false
      submodule_path:
        description: "Clone specific submodule(s). example: -- Amodule Bmodule"
        type: string
        default: ""
      pre_test_command:
        type: string
        default: ""
      test_path:
        description: The path that contains test files.
        default: ./tests
        type: string
      pixi_python_env:
        description: This input will pass to pixi -e parameter.
        type: string
        default: default
      test_args:
        description: Additional Pytest args.
        type: string
        default: ""
      cov:
        description: Whether to enable coverage test. pytest-cov is required in pixi.toml or pyproject.toml file.
        type: boolean
        default: false
      cov_thr:
        description: Coverage threshold.
        type: number
        default: 100

    secrets:
      CODECOV_TOKEN:
        required: false

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  pytest:
    env:
      UPLOAD_COV_REPORT:
    runs-on: ${{inputs.machine}}
    steps:
      # setup
      - uses: actions/checkout@v4

      - name: Update Submodule
        if: ${{ inputs.update_submodule }}
        run: git submodule update --init --recursive ${{ inputs.submodule_path }}

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          run-install: false

      # test
      - name: pre-test
        if: ${{inputs.pre_test_command != ''}}
        run: ${{inputs.pre_test_command}}

      - name: pytest (no cov)
        if: ${{ ! inputs.cov && success()}}
        run: pixi run -e ${{inputs.pixi_python_env}} pytest "${{inputs.test_path}}" --junitxml=junit.xml ${{inputs.test_args}}
        continue-on-error: true

      - name: pytest (cov)
        if: inputs.cov && success()
        run: pixi run -e ${{inputs.pixi_python_env}} pytest "${{inputs.test_path}}" --junitxml=junit.xml --cov --cov-report=xml ${{inputs.test_args}}
        continue-on-error: true
    
      - name: Upload cov results to Codecov
        if:  inputs.cov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: inputs.cov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
