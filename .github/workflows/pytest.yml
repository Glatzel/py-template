name: pytest

on:
  workflow_call:
    inputs:
      name:
        description: Name of the test.
        required: true
        type: string
      machine:
        description: The machine that this workflow will run on.
        required: true
        type: string
      update_submodule:
        description: Whether to clone submodule.
        type: boolean
        default: false
      submodule_path:
        description: "Clone specific submodule(s). example: -- Amodule Bmodule"
        type: string
        default: ""
      pre_test_command:
        type: string
        default: ""
      test_path:
        description: The path that contains test files.
        default: ./tests
        type: string
      pixi_python_env:
        description: This input will pass to pixi -e parameter.
        type: string
        default: default
      test_args:
        description: Additional Pytest args.
        type: string
        default: ""
      cov:
        description: Whether to enable coverage test. pytest-cov is required in pixi.toml or pyproject.toml file.
        type: boolean
        default: false
      cov_thr:
        description: Coverage threshold.
        type: number
        default: 100

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  pytest:
    env:
      UPLOAD_COV_REPORT:
    runs-on: ${{inputs.machine}}
    steps:
      # setup
      - uses: actions/checkout@v4

      - name: Update Submodule
        if: ${{ inputs.update_submodule }}
        run: git submodule update --init --recursive ${{ inputs.submodule_path }}

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: true
          cache-write: false
          environments: ${{inputs.pixi_python_env}}

      # test
      - name: pre-test
        if: ${{inputs.pre_test_command != ''}}
        run: ${{inputs.pre_test_command}}

      - name: pytest (no cov)
        if: ${{ ! inputs.cov && success()}}
        run: pixi run -e ${{inputs.pixi_python_env}} pytest "${{inputs.test_path}}" --junit-xml results/pytest.xml ${{inputs.test_args}}
        continue-on-error: true

      - name: pytest (cov)
        if: inputs.cov && success()
        run: pixi run -e ${{inputs.pixi_python_env}} pytest "${{inputs.test_path}}" --junit-xml results/pytest.xml --cov --cov-report= ${{inputs.test_args}}
        continue-on-error: true

      # cov
      - name: Coverage summary and check cover
        if: inputs.cov
        run: |
          "## Coverage Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          pixi run -e ${{inputs.pixi_python_env}} coverage html --skip-covered --skip-empty
          pixi run -e ${{inputs.pixi_python_env}} coverage report --skip-covered --skip-empty --format=markdown | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          pixi run -e ${{inputs.pixi_python_env}} coverage report --fail-under=${{inputs.cov_thr}}
          if($lastexitcode -ne 0){"UPLOAD_COV_REPORT=true">> "$env:GITHUB_ENV"}

      - name: Upload cov HTML report
        if: ${{env.UPLOAD_COV_REPORT=='true'}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.name}}-coverage-html-report
          path: htmlcov
          if-no-files-found: error

      # test report
      - name: Test Report title
        if: success() || failure()
        run: |
          "## Test Report" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

      - name: Test Report
        uses: dorny/test-reporter@main
        if: success() || failure()
        with:
          name: Pytest Report (${{inputs.name}})
          path: results/pytest.xml
          reporter: java-junit
          use-actions-summary: "true"